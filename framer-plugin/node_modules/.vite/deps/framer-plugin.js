import {
  __toESM,
  require_react
} from "./chunk-I4MZPW7S.js";

// node_modules/framer-plugin/dist/index.js
var import_react = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_react3 = __toESM(require_react());
function fe(t12) {
  return t12 !== void 0;
}
function m(t12) {
  return t12 === null;
}
function wt(t12) {
  return t12 !== null;
}
function Le(t12) {
  return t12 === true || t12 === false;
}
function s(t12) {
  return typeof t12 == "string";
}
function z(t12) {
  return typeof t12 == "number" && Number.isFinite(t12);
}
function J(t12) {
  return typeof t12 == "function";
}
function d(t12) {
  return typeof t12 == "object" && t12 !== null && !Array.isArray(t12);
}
function Ue(t12) {
  return Array.isArray(t12);
}
function x(t12, e) {
  throw e || new Error(t12 ? `Unexpected value: ${t12}` : "Application entered invalid state");
}
function c(t12, ...e) {
  if (t12) return;
  let i = Error("Assertion Error" + (e.length > 0 ? ": " + e.join(" ") : ""));
  if (i.stack) try {
    let n = i.stack.split(`
`);
    n[1]?.includes("assert") ? (n.splice(1, 1), i.stack = n.join(`
`)) : n[0]?.includes("assert") && (n.splice(0, 1), i.stack = n.join(`
`));
  } catch {
  }
  throw i;
}
function u(t12) {
  for (let e of Reflect.ownKeys(t12)) {
    let i = t12[e];
    !i || typeof i != "object" && !J(i) || u(i);
  }
  return Object.freeze(t12);
}
function Lt(t12, e) {
  if (t12 === e) return true;
  if (t12.length !== e.length) return false;
  for (let i = 0; i < t12.length; i++) if (t12[i] !== e[i]) return false;
  return true;
}
function Ut(t12) {
  return [t12.slice(0, -1), t12.at(-1)];
}
var Bi = "FileAsset";
var Vi = "__class";
function Ce(t12) {
  return d(t12) ? t12[Vi] === Bi : false;
}
var P = class {
  id;
  url;
  extension;
  constructor(e) {
    this.url = e.url, this.id = e.id, this.extension = e.extension;
  }
};
function Fe(t12) {
  return t12 instanceof P;
}
var zi = "ImageAsset";
var Oi = "__class";
function O(t12) {
  return d(t12) ? t12[Oi] === zi : false;
}
var y = class t {
  id;
  url;
  thumbnailUrl;
  altText;
  resolution;
  #e;
  #t;
  constructor(e, i) {
    this.#t = i, this.url = e.url, this.id = e.id, this.thumbnailUrl = e.thumbnailUrl, this.altText = e.altText, this.resolution = e.resolution;
  }
  cloneWithAttributes({ altText: e, resolution: i }) {
    return new t({ __class: "ImageAsset", id: this.id, url: this.url, thumbnailUrl: this.thumbnailUrl, altText: e !== void 0 ? e : this.altText, resolution: i !== void 0 ? i : this.resolution }, this.#t);
  }
  async measure() {
    return _i(this.url);
  }
  async getData() {
    if (this.#e && this.#e.bytes.length > 0) return this.#e;
    let e = await this.#t.invoke("getImageData", { id: this.id, resolution: this.resolution });
    if (!e) throw new Error("Failed to load image data");
    return this.#e = e, e;
  }
  async loadBitmap() {
    let { mimeType: e, bytes: i } = await this.getData(), n = new Blob([i], { type: e });
    return createImageBitmap(n);
  }
  async loadImage() {
    let e = await this.getData(), i = URL.createObjectURL(new Blob([e.bytes]));
    return new Promise((n, o) => {
      let r = new Image();
      r.onload = () => n(r), r.onerror = () => o(), r.src = i;
    });
  }
};
function Ie(t12) {
  return t12 instanceof y;
}
function N(t12) {
  return t12.type === "bytes" ? [t12.bytes.buffer] : [];
}
function Gi(t12) {
  if (!d(t12)) return false;
  let e = "bytes", i = "mimeType";
  return !(!(e in t12) || !(i in t12) || !(t12[e] instanceof Uint8Array) || !s(t12[i]));
}
async function Q(t12) {
  if (t12 instanceof File) return ze(t12);
  let e = await Bt(t12.image);
  return { name: t12.name, altText: t12.altText, resolution: t12.resolution, preferredImageRendering: t12.preferredImageRendering, ...e };
}
async function Be(t12) {
  if (t12 instanceof File) return ze(t12);
  let e = await Bt(t12.file);
  return { name: t12.name, ...e };
}
async function Bt(t12) {
  return t12 instanceof File ? ze(t12) : Gi(t12) ? { type: "bytes", mimeType: t12.mimeType, bytes: t12.bytes } : { type: "url", url: t12 };
}
function Ve(t12) {
  return Promise.all(t12.map(Q));
}
async function ze(t12) {
  return new Promise((e, i) => {
    let n = new FileReader();
    n.onload = (o) => {
      let r = t12.type, a = o.target?.result;
      if (!a || !(a instanceof ArrayBuffer)) {
        i(new Error("Failed to read file, arrayBuffer is null"));
        return;
      }
      let l = new Uint8Array(a);
      e({ bytes: l, mimeType: r, type: "bytes", name: t12.name });
    }, n.onerror = (o) => {
      i(o);
    }, n.readAsArrayBuffer(t12);
  });
}
async function _i(t12) {
  let e = t12 instanceof File, i = e ? URL.createObjectURL(t12) : t12, n = new Image();
  return n.crossOrigin = "anonymous", new Promise((o, r) => {
    n.onload = () => {
      o({ width: n.naturalWidth, height: n.naturalHeight });
    }, n.onerror = (a) => {
      r(a);
    }, n.src = i;
  }).finally(() => {
    e && URL.revokeObjectURL(i);
  });
}
var Ki = "Font";
function zt(t12) {
  return d(t12) && t12.__class === Ki;
}
function Hi(t12) {
  if (!z(t12)) return false;
  switch (t12) {
    case 100:
    case 200:
    case 300:
    case 400:
    case 500:
    case 600:
    case 700:
    case 800:
    case 900:
      return true;
    default:
      return false;
  }
}
function ji(t12) {
  if (!s(t12)) return false;
  switch (t12) {
    case "normal":
    case "italic":
      return true;
    default:
      return false;
  }
}
function ee(t12) {
  return d(t12) ? s(t12.family) && s(t12.selector) && Hi(t12.weight) && ji(t12.style) : false;
}
var A = class {
  selector;
  family;
  weight;
  style;
  constructor(e) {
    this.selector = e.selector, this.family = e.family, this.weight = e.weight, this.style = e.style;
  }
};
var Vt = /* @__PURE__ */ new Map();
function R(t12) {
  let e = Vt.get(t12.selector);
  if (e) return e;
  let i = new A(t12);
  return Vt.set(t12.selector, i), i;
}
function W(t12) {
  return { __class: "Font", selector: t12.selector, family: t12.family, weight: t12.weight, style: t12.style };
}
var Ot = "__class";
var Oe = "LinearGradient";
var Ge = "RadialGradient";
var _e = "ConicGradient";
function be(t12) {
  if (!d(t12)) return false;
  switch (t12[Ot]) {
    case Oe:
    case Ge:
    case _e:
      return true;
    default:
      return false;
  }
}
function te(t12) {
  return t12 instanceof G || t12 instanceof _ || t12 instanceof K;
}
function Gt(t12) {
  if (t12 instanceof G) return { __class: Oe, angle: t12.angle, stops: t12.stops };
  if (t12 instanceof _) return { __class: Ge, width: t12.width, height: t12.height, x: t12.x, y: t12.y, stops: t12.stops };
  if (t12 instanceof K) return { __class: _e, angle: t12.angle, x: t12.x, y: t12.y, stops: t12.stops };
  x(t12);
}
function Pe(t12) {
  switch (t12[Ot]) {
    case Oe:
      return new G(t12);
    case Ge:
      return new _(t12);
    case _e:
      return new K(t12);
    default:
      x(t12);
  }
}
var G = class t2 {
  angle;
  stops;
  constructor(e) {
    this.angle = e.angle, this.stops = e.stops, u(this);
  }
  cloneWithAttributes(e) {
    return new t2({ angle: e.angle ?? this.angle, stops: e.stops ?? this.stops });
  }
  toCSS() {
    let e = this.stops.map((i) => `${i.color} ${i.position * 100}%`).join(", ");
    return `linear-gradient(${this.angle}deg, ${e})`;
  }
};
var _ = class t3 {
  width;
  height;
  x;
  y;
  stops;
  constructor(e) {
    this.width = e.width, this.height = e.height, this.x = e.x, this.y = e.y, this.stops = e.stops, u(this);
  }
  cloneWithAttributes(e) {
    return new t3({ width: e.width ?? this.width, height: e.height ?? this.height, x: e.x ?? this.x, y: e.y ?? this.y, stops: e.stops ?? this.stops });
  }
  toCSS() {
    let e = this.stops.map((i, n) => {
      let o = this.stops[n + 1], r = i.position === 1 && o?.position === 1 ? i.position - 1e-4 : i.position;
      return `${i.color} ${r * 100}%`;
    }).join(", ");
    return `radial-gradient(${this.width} ${this.height} at ${this.x} ${this.y}, ${e})`;
  }
};
var K = class t4 {
  angle;
  x;
  y;
  stops;
  constructor(e) {
    this.angle = e.angle, this.x = e.x, this.y = e.y, this.stops = e.stops, u(this);
  }
  cloneWithAttributes(e) {
    return new t4({ angle: e.angle ?? this.angle, x: e.x ?? this.x, y: e.y ?? this.y, stops: e.stops ?? this.stops });
  }
  toCSS() {
    let e = this.stops.map((i) => `${i.color} ${i.position * 360}deg`).join(", ");
    return `conic-gradient(from ${this.angle}deg at ${this.x} ${this.y}, ${e})`;
  }
};
var qi = "ColorStyle";
var $i = "__class";
function v(t12) {
  return d(t12) ? t12[$i] === qi : false;
}
var h = class t5 {
  id;
  name;
  path;
  light;
  dark;
  #e;
  constructor(e, i) {
    this.id = e.id, this.name = e.name, this.light = e.light, this.dark = e.dark, this.path = e.path, this.#e = i;
  }
  async setAttributes(e) {
    let i = await this.#e.invoke("setColorStyleAttributes", this.id, e);
    return i ? new t5(i, this.#e) : null;
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async setPluginData(e, i) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, i);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async remove() {
    return this.#e.invoke("removeColorStyle", this.id);
  }
};
function k(t12) {
  return t12 instanceof h;
}
function xe(t12) {
  return { __class: "ColorStyle", id: t12.id, name: t12.name, light: t12.light, dark: t12.dark, path: t12.path };
}
var Xi = "TextStyle";
var Yi = "__class";
function _t(t12) {
  return d(t12) ? t12[Yi] === Xi : false;
}
var F = class t6 {
  id;
  name;
  path;
  tag;
  font;
  boldFont;
  italicFont;
  boldItalicFont;
  color;
  transform;
  alignment;
  decoration;
  decorationColor;
  decorationThickness;
  decorationStyle;
  decorationSkipInk;
  decorationOffset;
  balance;
  breakpoints;
  minWidth;
  fontSize;
  letterSpacing;
  lineHeight;
  paragraphSpacing;
  #e;
  constructor(e, i) {
    this.id = e.id, this.name = e.name, this.path = e.path, this.tag = e.tag, this.font = new A(e.font), this.boldFont = e.boldFont ? new A(e.boldFont) : null, this.italicFont = e.italicFont ? new A(e.italicFont) : null, this.boldItalicFont = e.boldItalicFont ? new A(e.boldItalicFont) : null, this.color = v(e.color) ? new h(e.color, i) : e.color, this.transform = e.transform, this.alignment = e.alignment, this.decoration = e.decoration, this.decorationColor = v(e.decorationColor) ? new h(e.decorationColor, i) : e.decorationColor, this.decorationThickness = e.decorationThickness, this.decorationStyle = e.decorationStyle, this.decorationSkipInk = e.decorationSkipInk, this.decorationOffset = e.decorationOffset, this.balance = e.balance, this.breakpoints = e.breakpoints, this.minWidth = e.minWidth, this.fontSize = e.fontSize, this.letterSpacing = e.letterSpacing, this.lineHeight = e.lineHeight, this.paragraphSpacing = e.paragraphSpacing, this.#e = i;
  }
  async setAttributes(e) {
    let i = await this.#e.invoke("setTextStyleAttributes", this.id, e);
    return i ? new t6(i, this.#e) : null;
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async setPluginData(e, i) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, i);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
  async remove() {
    return this.#e.invoke("removeTextStyle", this.id);
  }
};
function H(t12) {
  return t12 instanceof F;
}
function Kt(t12) {
  return { __class: "TextStyle", id: t12.id, name: t12.name, path: t12.path, tag: t12.tag, font: W(t12.font), boldFont: t12.boldFont ? W(t12.font) : null, italicFont: t12.italicFont ? W(t12.italicFont) : null, boldItalicFont: t12.boldItalicFont ? W(t12.boldItalicFont) : null, color: k(t12.color) ? xe(t12.color) : t12.color, transform: t12.transform, alignment: t12.alignment, decoration: t12.decoration, decorationColor: k(t12.decorationColor) ? xe(t12.decorationColor) : t12.decorationColor, decorationThickness: t12.decorationThickness, decorationStyle: t12.decorationStyle, decorationSkipInk: t12.decorationSkipInk, decorationOffset: t12.decorationOffset, balance: t12.balance, breakpoints: t12.breakpoints, minWidth: t12.minWidth, fontSize: t12.fontSize, letterSpacing: t12.letterSpacing, lineHeight: t12.lineHeight, paragraphSpacing: t12.paragraphSpacing };
}
function Te(t12) {
  if (Ji(t12)) return Qi(t12);
  if (Ue(t12)) return t12.map(Te);
  if (d(t12) && !(t12 instanceof Uint8Array)) {
    let e = {};
    for (let i in t12) e[i] = Te(t12[i]);
    return e;
  }
  return t12;
}
function Ht(t12, e) {
  let i = {};
  for (let n in t12) i[n] = Ke(t12[n], e);
  return i;
}
function Ke(t12, e) {
  if (Zi(t12)) switch (t12.__class) {
    case "ImageAsset":
      return new y(t12, e);
    case "FileAsset":
      return new P(t12);
    case "LinearGradient":
    case "RadialGradient":
    case "ConicGradient":
      return Pe(t12);
    case "TextStyle":
      return new F(t12, e);
    case "Font":
      return R(t12);
    case "ColorStyle":
      return new h(t12, e);
    default:
      x(t12);
  }
  if (d(t12)) {
    let i = {};
    for (let n in t12) i[n] = Ke(t12[n], e);
    return i;
  }
  return Ue(t12) ? t12.map((i) => Ke(i, e)) : t12;
}
function Zi(t12) {
  return !!(O(t12) || Ce(t12) || be(t12));
}
function Ji(t12) {
  return !!(Ie(t12) || Fe(t12) || te(t12) || H(t12) || ee(t12) || k(t12));
}
function Qi(t12) {
  if (Ie(t12)) return { __class: "ImageAsset", id: t12.id, thumbnailUrl: t12.thumbnailUrl, url: t12.url, altText: t12.altText, resolution: t12.resolution };
  if (Fe(t12)) return { __class: "FileAsset", id: t12.id, extension: t12.extension, url: t12.url };
  if (te(t12)) return Gt(t12);
  if (H(t12)) return Kt(t12);
  if (ee(t12)) return W(t12);
  if (k(t12)) return xe(t12);
  x(t12);
}
var ie = class extends Error {
  name = this.constructor.name;
};
var E = class extends Error {
  name = this.constructor.name;
};
function en(t12) {
  return t12.type === "separator";
}
function De(t12, e) {
  let i = [];
  for (let n of t12) {
    if (en(n)) {
      i.push(n);
      continue;
    }
    let { onAction: o, ...r } = n, a = r;
    if (n.onAction) {
      let l = Math.random();
      e.set(l, n.onAction), a.actionId = l;
    }
    n.submenu && (a.submenu = De(n.submenu, e)), i.push(a);
  }
  return i;
}
var tn = { canvas: true, image: true, editImage: true, configureManagedCollection: true, syncManagedCollection: true, collection: true, localization: true, code: true };
var io = Object.keys(tn);
var Se = "type";
var jt = { [Se]: "pluginReadySignal" };
var nn = "pluginReadyResponse";
var on = { methodResponse: true, subscriptionMessage: true, permissionUpdate: true, menuAction: true };
function qt(t12) {
  return d(t12) && s(t12[Se]) && t12[Se] in on;
}
function $t(t12) {
  return d(t12) && t12[Se] === nn;
}
var I = class {
  id;
  #e;
  #t;
  constructor(e, i) {
    this.id = e.id, this.#e = e.originalId ?? null, this.#t = i;
  }
  get isReplica() {
    return this.#e !== null;
  }
  async remove() {
    return this.#t.invoke("removeNodes2", [this.id]);
  }
  async select() {
    return this.#t.invoke("setSelection", [this.id]);
  }
  async clone() {
    if (this.__class === "UnknownNode") throw Error("Can not clone unknown node");
    return this.#t.cloneNode(this.id);
  }
  async setAttributes(e) {
    if (this.__class === "UnknownNode") throw Error("Can not set attributes on unknown node");
    return this.#t.setAttributes(this.id, e);
  }
  async getRect() {
    return this.#t.invoke("getRect", this.id);
  }
  async zoomIntoView(e) {
    return this.#t.invoke("zoomIntoView", [this.id], e);
  }
  async getParent() {
    return this.#t.getParent(this.id);
  }
  async getChildren() {
    return w(this) ? Promise.resolve([]) : this.#t.getChildren(this.id);
  }
  async getNodesWithType(e) {
    return w(this) ? Promise.resolve([]) : (await this.#t.invoke("getNodesWithType", this.id, e)).map((n) => p(n, this.#t));
  }
  async getNodesWithAttribute(e) {
    return w(this) ? Promise.resolve([]) : (await this.#t.invoke("getNodesWithAttribute", this.id, e)).map((n) => p(n, this.#t));
  }
  async getNodesWithAttributeSet(e) {
    return w(this) ? Promise.resolve([]) : (await this.#t.invoke("getNodesWithAttributeSet", this.id, e)).map((n) => p(n, this.#t));
  }
  async *walk() {
    if (yield this, !w(this)) for (let e of await this.getChildren()) yield* e.walk();
  }
  async getPluginData(e) {
    return this.#t.invoke("getPluginDataForNode", this.id, e);
  }
  async setPluginData(e, i) {
    return this.#t.invoke("setPluginDataForNode", this.id, e, i);
  }
  async getPluginDataKeys() {
    return this.#t.invoke("getPluginDataKeysForNode", this.id);
  }
};
var L = class extends I {
  __class = "FrameNode";
  name;
  visible;
  locked;
  backgroundColor;
  backgroundImage;
  backgroundGradient;
  rotation;
  opacity;
  borderRadius;
  imageRendering;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  maxWidth;
  minWidth;
  maxHeight;
  minHeight;
  aspectRatio;
  link;
  linkOpenInNewTab;
  constructor(e, i) {
    super(e, i), this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.backgroundColor = v(e.backgroundColor) ? new h(e.backgroundColor, i) : e.backgroundColor ?? null, this.backgroundImage = e.backgroundImage ? new y(e.backgroundImage, i) : null, this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.borderRadius = e.borderRadius ?? null, this.backgroundGradient = be(e.backgroundGradient) ? Pe(e.backgroundGradient) : null, this.imageRendering = e.imageRendering ?? null, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, this.maxWidth = e.maxWidth ?? null, this.minWidth = e.minWidth ?? null, this.maxHeight = e.maxHeight ?? null, this.minHeight = e.minHeight ?? null, this.aspectRatio = e.aspectRatio ?? null, this.link = e.link ?? null, this.linkOpenInNewTab = e.linkOpenInNewTab ?? null, u(this);
  }
};
var U = class extends I {
  __class = "TextNode";
  name;
  visible;
  locked;
  rotation;
  opacity;
  font;
  inlineTextStyle;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  maxWidth;
  minWidth;
  maxHeight;
  minHeight;
  link;
  linkOpenInNewTab;
  #e;
  constructor(e, i) {
    super(e, i), this.#e = i, this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.font = e.font ? R(e.font) : null, this.inlineTextStyle = e.inlineTextStyle ? new F(e.inlineTextStyle, i) : null, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, this.maxWidth = e.maxWidth ?? null, this.minWidth = e.minWidth ?? null, this.maxHeight = e.maxHeight ?? null, this.minHeight = e.minHeight ?? null, this.link = e.link ?? null, this.linkOpenInNewTab = e.linkOpenInNewTab ?? null, u(this);
  }
  async setText(e) {
    await this.#e.invoke("setTextForNode", this.id, e);
  }
  async getText() {
    return this.#e.invoke("getTextForNode", this.id);
  }
};
var ne = class extends I {
  __class = "SVGNode";
  name;
  visible;
  locked;
  svg;
  rotation;
  opacity;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  constructor(e, i) {
    super(e, i), this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.svg = e.svg, this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, u(this);
  }
};
var oe = class extends I {
  __class = "VectorSetItemNode";
  name;
  visible;
  locked;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  #e;
  constructor(e, i) {
    super(e, i), this.#e = i, this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.top = e.top ?? null, this.right = e.right ?? null, this.bottom = e.bottom ?? null, this.left = e.left ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, u(this);
  }
  async getSVG() {
    return this.#e.invoke("getSVGForNode", this.id);
  }
};
var re = class extends I {
  __class = "ComponentInstanceNode";
  name;
  visible;
  locked;
  componentIdentifier;
  insertURL;
  componentName;
  controls;
  rotation;
  opacity;
  position;
  top;
  right;
  bottom;
  left;
  centerX;
  centerY;
  width;
  height;
  maxWidth;
  minWidth;
  maxHeight;
  minHeight;
  aspectRatio;
  #e;
  constructor(e, i) {
    super(e, i), this.#e = i, this.name = e.name ?? null, this.visible = e.visible ?? true, this.locked = e.locked ?? false, this.componentIdentifier = e.componentIdentifier, this.componentName = e.componentName ?? null, this.insertURL = e.insertURL ?? null, this.controls = Ht(e.controls ?? {}, i), this.rotation = e.rotation ?? 0, this.opacity = e.opacity ?? 1, this.position = e.position, this.left = e.left ?? null, this.right = e.right ?? null, this.top = e.top ?? null, this.bottom = e.bottom ?? null, this.centerX = e.centerX ?? null, this.centerY = e.centerY ?? null, this.width = e.width ?? null, this.height = e.height ?? null, this.maxWidth = e.maxWidth ?? null, this.minWidth = e.minWidth ?? null, this.maxHeight = e.maxHeight ?? null, this.minHeight = e.minHeight ?? null, this.aspectRatio = e.aspectRatio ?? null, u(this);
  }
  async getRuntimeError() {
    return this.#e.invoke("getRuntimeErrorForCodeComponentNode", this.id);
  }
};
var ae = class extends I {
  __class = "WebPageNode";
  path;
  collectionId;
  constructor(e, i) {
    super(e, i), this.path = e.path ?? null, this.collectionId = e.collectionId ?? null, u(this);
  }
};
var se = class extends I {
  __class = "ComponentNode";
  name;
  componentIdentifier;
  insertURL;
  componentName;
  constructor(e, i) {
    super(e, i), this.componentIdentifier = e.componentIdentifier, this.insertURL = e.insertURL ?? null, this.componentName = e.componentName ?? null, this.name = e.name ?? null, u(this);
  }
};
var le = class extends I {
  __class = "VectorSetNode";
  name;
  constructor(e, i) {
    super(e, i), this.name = e.name ?? null, u(this);
  }
};
var de = class extends I {
  __class = "UnknownNode";
  constructor(e, i) {
    super(e, i), u(this);
  }
};
function p(t12, e) {
  switch (t12.__class) {
    case "WebPageNode":
      return new ae(t12, e);
    case "ComponentNode":
      return new se(t12, e);
    case "VectorSetNode":
      return new le(t12, e);
    case "VectorSetItemNode":
      return new oe(t12, e);
    case "ComponentInstanceNode":
      return new re(t12, e);
    case "FrameNode":
      return new L(t12, e);
    case "SVGNode":
      return new ne(t12, e);
    case "TextNode":
      return new U(t12, e);
    case "UnknownNode":
      return new de(t12, e);
    default:
      return new de(t12, e);
  }
}
function Ne(t12) {
  return t12 instanceof L;
}
function Xt(t12) {
  return t12 instanceof U;
}
function Yt(t12) {
  return t12 instanceof ne;
}
function j(t12) {
  return t12 instanceof re;
}
function Zt(t12) {
  return t12 instanceof ae;
}
function Jt(t12) {
  return t12 instanceof se;
}
function Qt(t12) {
  return t12 instanceof le;
}
function ei(t12) {
  return t12 instanceof oe;
}
function w(t12) {
  return t12 instanceof de;
}
function ce(t12) {
  return !!(Ne(t12) || Xt(t12) || j(t12) || Yt(t12) || ei(t12) || w(t12));
}
function He(t12) {
  return !!(Zt(t12) || Jt(t12) || Qt(t12) || w(t12));
}
var je = Symbol();
var qe = Symbol();
var rn = Symbol();
var an = Symbol();
var B = { getAiServiceInfo: je, sendTrackingEvent: qe, environmentInfo: rn, showUncheckedPermissionToasts: an };
var ti = "INTERNAL_";
var Ae = `${ti}getAiServiceInfo`;
var ve = `${ti}sendTrackingEvent`;
var sn = ["unstable_getCodeFile", "unstable_getCodeFiles", "unstable_getCodeFileVersionContent", "unstable_getCodeFileLint2", "unstable_getCodeFileTypecheck2", "unstable_getCodeFileVersions"];
var ln = ["closeNotification", "closePlugin", "getActiveCollection", "getActiveLocale", "getActiveManagedCollection", "getCanvasRoot", "getChildren", "getCollection", "getCollectionFields", "getCollectionFields2", "getCollectionItems", "getCollectionItems2", "getCollections", "getColorStyle", "getColorStyles", "getCurrentUser", "getCurrentUser2", "getCustomCode", "getDefaultLocale", "getFont", "getFonts", "getImage", "getImageData", "getLocales", "getLocalizationGroups", "getManagedCollection", "getManagedCollectionFields", "getManagedCollectionFields2", "getManagedCollectionItemIds", "getManagedCollections", "getNode", "getNodesWithAttribute", "getNodesWithAttributeSet", "getNodesWithType", "getParent", "getPluginData", "getPluginDataForNode", "getPluginDataKeys", "getPluginDataKeysForNode", "getProjectInfo", "getProjectInfo2", "getPublishInfo", "getRect", "getSelection", "getSVGForNode", "getText", "getTextForNode", "getTextStyle", "getTextStyles", "hideUI", "notify", "onPointerDown", "setActiveCollection", "setSelection", "showUI", "getCodeFileVersionContent", "lintCode", "typecheckCode", "getCodeFileVersions", "getCodeFiles", "getCodeFile", "getRedirects", "uploadFile", "uploadFiles", "uploadImage", "uploadImages", "zoomIntoView", "getRuntimeErrorForModule", "getRuntimeErrorForCodeComponentNode", "showProgressOnInstances", "removeProgressFromInstances", "addComponentInstancePlaceholder", "updateComponentInstancePlaceholder", "removeComponentInstancePlaceholder", "setMenu", "showContextMenu", Ae, ve, "getAiServiceInfo", "sendTrackingEvent", ...sn];
var dn = new Set(ln);
function ii(t12) {
  return !dn.has(t12);
}
var ue = { addComponentInstance: ["addComponentInstance"], addComponentInstancePlaceholder: [], addDetachedComponentLayers: ["addDetachedComponentLayers"], addImage: ["addImage"], addImages: ["addImages"], addSVG: ["addSVG"], addText: ["addText"], addRedirects: ["addRedirects"], getRedirects: [], removeRedirects: ["removeRedirects"], setRedirectOrder: ["setRedirectOrder"], subscribeToRedirects: [], cloneNode: ["cloneNode"], closePlugin: [], createColorStyle: ["createColorStyle"], createFrameNode: ["createNode"], createTextNode: ["createNode"], createTextStyle: ["createTextStyle"], getActiveCollection: [], getActiveLocale: [], getActiveManagedCollection: [], getCanvasRoot: [], getChildren: [], getCollection: [], getCollections: [], getColorStyle: [], getColorStyles: [], getCurrentUser: [], getCustomCode: [], getDefaultLocale: [], getFont: [], getFonts: [], getImage: [], getLocales: [], getLocalizationGroups: [], getManagedCollection: [], getManagedCollections: [], getNode: [], getNodesWithAttribute: [], getNodesWithAttributeSet: [], getNodesWithType: [], getParent: [], getPluginData: [], getPluginDataKeys: [], getProjectInfo: [], getPublishInfo: [], getRect: [], getSelection: [], getText: [], getTextStyle: [], getTextStyles: [], hideUI: [], lintCode: [], makeDraggable: ["onDragEnd", "onDragStart", "onDrag", "setDragData", "preloadDetachedComponentLayers", "preloadImageUrlForInsertion", "preloadDragPreviewImage"], notify: [], preloadDetachedComponentLayers: ["preloadDetachedComponentLayers"], preloadDragPreviewImage: ["preloadDragPreviewImage"], preloadImageUrlForInsertion: ["preloadImageUrlForInsertion"], removeNode: ["removeNodes2"], removeNodes: ["removeNodes2"], setAttributes: ["setAttributes"], setCustomCode: ["setCustomCode"], setImage: ["setImage"], setLocalizationData: ["setLocalizationData"], setMenu: [], showContextMenu: [], setParent: ["setParent"], setPluginData: ["setPluginData"], setSelection: [], setText: ["setText"], typecheckCode: [], showUI: [], subscribeToCanvasRoot: [], subscribeToColorStyles: [], subscribeToCustomCode: [], subscribeToImage: [], subscribeToPublishInfo: [], subscribeToSelection: [], subscribeToText: [], subscribeToTextStyles: [], createCodeFile: ["createCodeFile"], unstable_ensureMinimumDependencyVersion: ["unstable_ensureMinimumDependencyVersion"], getCodeFiles: [], getCodeFile: [], subscribeToCodeFiles: [], subscribeToOpenCodeFile: [], uploadFile: [], uploadFiles: [], uploadImage: [], uploadImages: [], zoomIntoView: [], "ComponentInstanceNode.getRuntimeError": [], "ImageAsset.cloneWithAttributes": [], "ImageAsset.getData": [], "ImageAsset.loadBitmap": [], "ImageAsset.loadImage": [], "ImageAsset.measure": [], "CodeFile.remove": ["removeCodeFile"], "CodeFile.rename": ["renameCodeFile"], "CodeFile.setFileContent": ["setCodeFileContent"], "CodeFile.getVersions": [], "CodeFile.showProgressOnInstances": [], "CodeFile.removeProgressFromInstances": [], "CodeFile.lint": [], "CodeFile.typecheck": [], "CodeFileVersion.getContent": [], "ComponentInstancePlaceholder.setAttributes": [], "ComponentInstancePlaceholder.remove": [], "ComponentInstancePlaceholder.replaceWithComponentInstance": ["replaceComponentInstancePlaceholderWithComponentInstance"], "Field.remove": ["removeCollectionFields"], "Field.setAttributes": ["addCollectionFields"], "EnumCase.remove": ["removeEnumCase"], "EnumCase.setAttributes": ["updateEnumCase"], "EnumField.addCase": ["addEnumCase"], "EnumField.setCaseOrder": ["setEnumCaseOrder"], "Collection.addFields": ["addCollectionFields"], "Collection.addItems": ["addCollectionItems2"], "Collection.getFields": [], "Collection.getItems": [], "Collection.getPluginData": [], "Collection.getPluginDataKeys": [], "Collection.removeFields": ["removeCollectionFields"], "Collection.removeItems": ["removeCollectionItems"], "Collection.setAsActive": [], "Collection.setFieldOrder": ["setCollectionFieldOrder"], "Collection.setItemOrder": ["setCollectionItemOrder"], "Collection.setPluginData": ["setPluginDataForNode"], "CollectionItem.getPluginData": [], "CollectionItem.getPluginDataKeys": [], "CollectionItem.remove": ["removeCollectionItems"], "CollectionItem.setAttributes": ["setCollectionItemAttributes2"], "CollectionItem.setPluginData": ["setPluginDataForNode"], "ManagedCollection.addItems": ["addManagedCollectionItems2"], "ManagedCollection.getFields": [], "ManagedCollection.getItemIds": [], "ManagedCollection.getPluginData": [], "ManagedCollection.getPluginDataKeys": [], "ManagedCollection.removeItems": ["removeManagedCollectionItems"], "ManagedCollection.setAsActive": [], "ManagedCollection.setFields": ["setManagedCollectionFields"], "ManagedCollection.setItemOrder": ["setManagedCollectionItemOrder"], "ManagedCollection.setPluginData": ["setPluginDataForNode"], "Node.clone": ["cloneNode"], "Node.getChildren": [], "Node.getNodesWithAttribute": [], "Node.getNodesWithAttributeSet": [], "Node.getNodesWithType": [], "Node.getParent": [], "Node.getPluginData": [], "Node.getPluginDataKeys": [], "Node.getRect": [], "Node.remove": ["removeNodes2"], "Node.select": [], "Node.setAttributes": ["setAttributes"], "Node.setPluginData": ["setPluginDataForNode"], "Node.walk": [], "Node.zoomIntoView": [], "TextNode.getText": [], "TextNode.setText": ["setTextForNode"], "ColorStyle.getPluginData": [], "ColorStyle.getPluginDataKeys": [], "ColorStyle.remove": ["removeColorStyle"], "ColorStyle.setAttributes": ["setColorStyleAttributes"], "ColorStyle.setPluginData": ["setPluginDataForNode"], "TextStyle.getPluginData": [], "TextStyle.getPluginDataKeys": [], "TextStyle.remove": ["removeTextStyle"], "TextStyle.setAttributes": ["setTextStyleAttributes"], "TextStyle.setPluginData": ["setPluginDataForNode"], [je]: [], [qe]: [] };
var ke = [];
for (let t12 of Object.keys(ue)) ue[t12].length !== 0 && ke.push(t12);
u(ke);
function $e(t12) {
  let e = {};
  for (let i of ke) {
    let n = ue[i];
    e[i] = n.every((o) => t12[o]);
  }
  return e;
}
function ni() {
  let t12 = {};
  for (let e of ke) t12[e] = true;
  return t12;
}
var q = null;
function oi(t12) {
  if (!q) {
    let i = document.createElement("style");
    document.head.appendChild(i), q = i.sheet;
  }
  if (!q) {
    t12();
    return;
  }
  let e = q.insertRule("* { transition: none !important; animation: none !important; }");
  t12(), requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      q && q.deleteRule(e);
    });
  });
}
var Ee = class {
  methodInvocationId = 0;
  notificationId = 0;
  postMessage;
  methodResponseHandlers = /* @__PURE__ */ new Map();
  mode;
  subscriptions = /* @__PURE__ */ new Map();
  perMethodPermissionMap;
  permissionSubscriptions = /* @__PURE__ */ new Set();
  messageTypesCheckedInIsAllowedTo = /* @__PURE__ */ new Set();
  showUncheckedPermissionToasts = true;
  environmentInfo = null;
  menuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
  contextMenuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
  constructor(e) {
    if (!e) {
      this.postMessage = () => {
      }, this.mode = "canvas", this.perMethodPermissionMap = ni(), typeof window > "u" && console.warn("Framer Plugin API is not supported in non-browser environments");
      return;
    }
    window.addEventListener("message", this.onMessage), window.addEventListener("error", (l) => {
      l.error instanceof E && (l.preventDefault(), l.stopImmediatePropagation());
    }), window.addEventListener("unhandledrejection", (l) => {
      l.reason instanceof E && (l.preventDefault(), l.stopImmediatePropagation());
    });
    let { origin: i, pluginReadyResponse: { mode: n, theme: o, permissionMap: r, environmentInfo: a } } = e;
    this.environmentInfo = a, this.postMessage = (l, V) => window.parent.postMessage(l, i, V), this.mode = n, this.applyPluginTheme(o), this.subscribe("theme", this.applyPluginTheme), this.perMethodPermissionMap = $e(r), window.addEventListener("pointerdown", () => {
      this.invoke("onPointerDown");
    });
  }
  async invoke(e, ...i) {
    return this.invokeTransferable(e, void 0, ...i);
  }
  async invokeTransferable(e, i, ...n) {
    if (ii(e) && !this.messageTypesCheckedInIsAllowedTo.has(e)) {
      let o = `Invoking protected message type "${e}" without checking permissions first`;
      this.showUncheckedPermissionToasts && this.notify(o), console.error(o);
    }
    return new Promise((o, r) => {
      let a = { type: "methodInvocation", methodName: e, id: this.methodInvocationId, args: n.map(Te) };
      this.methodInvocationId += 1, this.methodResponseHandlers.set(a.id, { resolve: o, reject: r }), this.postMessage(a, i);
    });
  }
  subscribe(e, i) {
    this.postMessage({ type: "subscribe", topic: e });
    let n = this.subscriptions.get(e) ?? /* @__PURE__ */ new Set();
    return n.add(i), this.subscriptions.set(e, n), () => {
      let o = this.subscriptions.get(e) ?? /* @__PURE__ */ new Set();
      o.delete(i), o.size === 0 && this.postMessage({ type: "unsubscribe", topic: e }), this.subscriptions.set(e, o);
    };
  }
  onMessage = (e) => {
    let i = e.data;
    if (qt(i)) switch (i.type) {
      case "permissionUpdate": {
        this.perMethodPermissionMap = $e(i.permissionMap);
        for (let n of this.permissionSubscriptions) n();
        break;
      }
      case "methodResponse": {
        let n = this.methodResponseHandlers.get(i.id);
        if (!n) throw new Error(`No handler for response with id ${i.id}`);
        this.methodResponseHandlers.delete(i.id), s(i.error) ? n.reject(new ie(i.error)) : n.resolve(i.result);
        break;
      }
      case "subscriptionMessage": {
        let { topic: n, payload: o } = i, r = this.subscriptions.get(n);
        if (!r) throw new Error("Received a subscription message but no handler present");
        for (let a of r) a(o);
        break;
      }
      case "menuAction": {
        let n = this.getOnActionFromCallbackMap(i.actionId, i.actionType);
        if (!n) throw new Error("Menu action received for an unknown menu item");
        n();
        break;
      }
      default:
        x(i);
    }
  };
  getOnActionFromCallbackMap(e, i) {
    switch (i) {
      case "pluginMenu":
        return this.menuItemOnActionCallbackMap.get(e);
      case "contextMenu":
        return this.contextMenuItemOnActionCallbackMap.get(e);
      default:
        x(i);
    }
  }
  applyPluginTheme = (e) => {
    oi(() => {
      document.body.setAttribute("data-framer-theme", e.mode);
      for (let i in e.tokens) document.body.style.setProperty(i, e.tokens[i]);
    });
  };
  async cloneNode(e) {
    let i = await this.invoke("cloneNode", e);
    return i ? p(i, this) : null;
  }
  async setAttributes(e, i) {
    let n = await this.invoke("setAttributes", e, i);
    return n ? p(n, this) : null;
  }
  async getParent(e) {
    let i = await this.invoke("getParent", e);
    return i ? p(i, this) : null;
  }
  async getChildren(e) {
    return (await this.invoke("getChildren", e)).map((n) => {
      let o = p(n, this);
      return c(ce(o)), o;
    });
  }
  notify = (e, i) => {
    let n = `notification-${this.notificationId}`;
    return this.notificationId += 1, this.invoke("notify", e, { notificationId: n, variant: i?.variant ?? "info", buttonText: i?.button?.text, durationMs: i?.durationMs }).then((o) => {
      o === "actionButtonClicked" && i?.button?.onClick && i.button.onClick(), i?.onDisappear && i.onDisappear();
    }), { close: () => this.invoke("closeNotification", n) };
  };
  async setMenu(e) {
    this.menuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
    let i = De(e, this.menuItemOnActionCallbackMap);
    await this.invoke("setMenu", i);
  }
  async showContextMenu(e, i) {
    this.contextMenuItemOnActionCallbackMap = /* @__PURE__ */ new Map();
    let n = De(e, this.contextMenuItemOnActionCallbackMap);
    await this.invoke("showContextMenu", n, i);
  }
};
function cn(t12) {
  return t12.type === "component";
}
function un(t12) {
  return t12.type === "override";
}
var Xe = class {
  #e;
  #t;
  get id() {
    return this.#e.id;
  }
  get name() {
    return this.#e.name;
  }
  get createdAt() {
    return this.#e.createdAt;
  }
  get createdBy() {
    return this.#e.createdBy;
  }
  constructor(e, i) {
    this.#t = i, this.#e = e;
  }
  async getContent() {
    return await this.#t.invoke("getCodeFileVersionContent", this.#e.fileId, this.#e.id);
  }
};
var M = class t7 {
  #e;
  #t;
  get id() {
    return this.#e.id;
  }
  get name() {
    return this.#e.name;
  }
  get path() {
    return this.#e.path;
  }
  get content() {
    return this.#e.content;
  }
  get exports() {
    return this.#e.exports;
  }
  get versionId() {
    return this.#e.versionId;
  }
  constructor(e, i) {
    this.#t = i, this.#e = e;
  }
  async setFileContent(e) {
    let i = await this.#t.invoke("setCodeFileContent", this.id, e);
    return new t7(i, this.#t);
  }
  async rename(e) {
    let i = await this.#t.invoke("renameCodeFile", this.id, e);
    return new t7(i, this.#t);
  }
  async remove() {
    return this.#t.invoke("removeCodeFile", this.id);
  }
  async getVersions() {
    return (await this.#t.invoke("getCodeFileVersions", this.id)).map((i) => new Xe(i, this.#t));
  }
  async showProgressOnInstances(e) {
    return this.#t.invoke("showProgressOnInstances", this.id, e);
  }
  async removeProgressFromInstances() {
    return this.#t.invoke("removeProgressFromInstances", this.id);
  }
  async lint(e) {
    return await this.#t.invoke("lintCode", this.name, this.content, e);
  }
  async typecheck(e) {
    return await this.#t.invoke("typecheckCode", this.name, this.content, e);
  }
};
var T = class {
  #e;
  #t;
  #i;
  get id() {
    return this.#i.id;
  }
  get name() {
    return this.#i.name;
  }
  constructor(e, i, n) {
    this.#e = e, this.#t = i, this.#i = n;
  }
  async setAttributes(e) {
    let i = { ...e, type: this.type, id: this.id }, [n] = await this.#e.invoke("addCollectionFields2", this.#t, [i]);
    if (c(fe(n)), m(n)) return null;
    c(n.type === this.type);
    let o = this.constructor;
    return new o(this.#e, this.#t, n);
  }
  async remove() {
    await this.#e.invoke("removeCollectionFields", this.#t, [this.id]);
  }
};
var b = class extends T {
  #e;
  get required() {
    return this.#e.required;
  }
  constructor(e, i, n) {
    super(e, i, n), this.#e = n;
  }
};
var Ye = class extends T {
  type = ct;
};
var Ze = class extends T {
  type = ut;
};
var Je = class extends T {
  type = pt;
};
var Qe = class extends b {
  type = mt;
  #e;
  constructor(e, i, n) {
    super(e, i, n), this.#e = n;
  }
  get basedOn() {
    return this.#e.basedOn;
  }
};
var et = class extends b {
  type = gt;
};
var Me = class extends b {
  type = yt;
};
var tt = class extends b {
  type = ft;
};
var it = class extends b {
  type = Ct;
};
var nt = class extends T {
  type = xt;
};
var Re = class extends T {
  type = Tt;
};
var ot = class extends b {
  type = Ft;
  #e;
  get allowedFileTypes() {
    return this.#e.allowedFileTypes;
  }
  constructor(e, i, n) {
    super(e, i, n), this.#e = n;
  }
};
var We = class t8 {
  #e;
  #t;
  #i;
  #n;
  get id() {
    return this.#t.id;
  }
  get name() {
    return this.#t.name;
  }
  get nameByLocale() {
    return this.#t.nameByLocale;
  }
  constructor(e, i, n, o) {
    this.#e = e, this.#i = i, this.#n = n, this.#t = o;
  }
  async setAttributes(e) {
    let i = await this.#e.invoke("updateEnumCase", this.#i, this.#n, this.id, e);
    return i ? new t8(this.#e, this.#i, this.#n, i) : null;
  }
  async remove() {
    await this.#e.invoke("removeEnumCase", this.#i, this.#n, this.id);
  }
};
var rt = class extends T {
  type = It;
  #e;
  #t;
  #i;
  #n;
  get cases() {
    return this.#n || (this.#n = this.#t.cases.map((e) => new We(this.#e, this.#i, this.id, e)), u(this.#n)), this.#n;
  }
  constructor(e, i, n) {
    super(e, i, n), this.#e = e, this.#t = n, this.#i = i;
  }
  async addCase(e) {
    let i = await this.#e.invoke("addEnumCase", this.#i, this.id, e);
    return i ? new We(this.#e, this.#i, this.id, i) : null;
  }
  async setCaseOrder(e) {
    await this.#e.invoke("setEnumCaseOrder", this.#i, this.id, e);
  }
};
var at = class extends b {
  type = bt;
  #e;
  get collectionId() {
    return this.#e.collectionId;
  }
  constructor(e, i, n) {
    super(e, i, n), this.#e = n;
  }
};
var st = class extends b {
  type = Pt;
  #e;
  get collectionId() {
    return this.#e.collectionId;
  }
  constructor(e, i, n) {
    super(e, i, n), this.#e = n;
  }
};
var lt = class extends b {
  type = ht;
  fields;
  constructor(e, i, n) {
    super(e, i, n);
    let o = n.fields[0];
    this.fields = [new Me(e, i, o)];
  }
};
function dt(t12, e, i) {
  return t12.map((n) => {
    switch (n.type) {
      case ct:
        return new Ye(e, i, n);
      case ut:
        return new Ze(e, i, n);
      case pt:
        return new Je(e, i, n);
      case mt:
        return new Qe(e, i, n);
      case gt:
        return new et(e, i, n);
      case yt:
        return new Me(e, i, n);
      case ft:
        return new tt(e, i, n);
      case Ct:
        return new it(e, i, n);
      case xt:
        return new nt(e, i, n);
      case Tt:
        return new Re(e, i, n);
      case Ft:
        return new ot(e, i, n);
      case It:
        return new rt(e, i, n);
      case bt:
        return new at(e, i, n);
      case Pt:
        return new st(e, i, n);
      case ht:
        return new lt(e, i, n);
      default:
        return new Re(e, i, n);
    }
  });
}
var ri = "action";
function pn(t12) {
  return !!t12 && ri in t12 && s(t12[ri]);
}
function ai(t12) {
  return Object.keys(t12).reduce((e, i) => {
    let n = t12[i];
    return pn(n) && (e[i] = n), e;
  }, {});
}
var mn = { array: false, boolean: false, collectionReference: false, color: false, date: false, enum: false, file: false, formattedText: false, image: true, link: false, multiCollectionReference: false, number: false, string: false, unsupported: false };
function gn(t12) {
  return mn[t12];
}
function yn(t12) {
  return gn(t12.type);
}
var ct = "boolean";
var ut = "color";
var pt = "number";
var mt = "string";
var gt = "formattedText";
var yt = "image";
var ht = "array";
var ft = "link";
var Ct = "date";
var Ft = "file";
var It = "enum";
var bt = "collectionReference";
var Pt = "multiCollectionReference";
var xt = "divider";
var Tt = "unsupported";
function hn(t12) {
  return t12.map((e) => {
    if (e.type !== "enum") return e;
    let i = e.cases.map((n) => {
      let o = n.nameByLocale ? ai(n.nameByLocale) : void 0;
      return { ...n, nameByLocale: o };
    });
    return { ...e, cases: i };
  });
}
function si(t12, e) {
  let i = {};
  for (let n in t12) {
    let o = t12[n];
    if (o) switch (o.type) {
      case "image":
        if (O(o.value)) {
          i[n] = { ...o, value: new y(o.value, e) };
          break;
        }
        i[n] = { ...o, value: o.value };
        break;
      case "file":
        if (Ce(o.value)) {
          i[n] = { ...o, value: new P(o.value) };
          break;
        }
        i[n] = { ...o, value: o.value };
        break;
      case "color":
        if (v(o.value)) {
          i[n] = { ...o, value: new h(o.value, e) };
          break;
        }
        i[n] = { ...o, value: o.value };
        break;
      case "array": {
        let r = o.value.map((a) => {
          let l = si(a.fieldData, e), V = {};
          for (let D in l) {
            let S = l[D];
            c(S && yn(S), "Unsupported array item field data entry"), V[D] = S;
          }
          return { ...a, fieldData: V };
        });
        i[n] = { ...o, value: r };
        break;
      }
      default:
        i[n] = o;
    }
  }
  return i;
}
var pe = class {
  id;
  name;
  readonly;
  managedBy;
  #e;
  constructor(e, i) {
    this.id = e.id, this.name = e.name, this.readonly = e.readonly, c(e.managedBy !== "user", "Managed Collection can only be managed by a plugin"), this.managedBy = e.managedBy, this.#e = i, u(this);
  }
  async getItemIds() {
    return this.#e.invoke("getManagedCollectionItemIds", this.id);
  }
  async setItemOrder(e) {
    return this.#e.invoke("setManagedCollectionItemOrder", this.id, e);
  }
  async getFields() {
    return this.#e.invoke("getManagedCollectionFields2", this.id);
  }
  async setFields(e) {
    let i = hn(e);
    return this.#e.invoke("setManagedCollectionFields", this.id, i);
  }
  async addItems(e) {
    return this.#e.invoke("addManagedCollectionItems2", this.id, e);
  }
  async removeItems(e) {
    return this.#e.invoke("removeManagedCollectionItems", this.id, e);
  }
  async setAsActive() {
    return this.#e.invoke("setActiveCollection", this.id);
  }
  async setPluginData(e, i) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, i);
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
};
var $ = class {
  id;
  name;
  slugFieldName;
  slugFieldBasedOn;
  readonly;
  managedBy;
  #e;
  constructor(e, i) {
    this.id = e.id, this.name = e.name, this.slugFieldName = e.slugFieldName, this.slugFieldBasedOn = e.slugFieldBasedOn, this.readonly = e.readonly, this.managedBy = e.managedBy, this.#e = i, u(this);
  }
  async setItemOrder(e) {
    return this.#e.invoke("setCollectionItemOrder", this.id, e);
  }
  async getFields() {
    let e = await this.#e.invoke("getCollectionFields2", this.id, true);
    return dt(e, this.#e, this.id);
  }
  async addFields(e) {
    let i = await this.#e.invoke("addCollectionFields2", this.id, e);
    return c(i.every(wt)), dt(i, this.#e, this.id);
  }
  async removeFields(e) {
    return this.#e.invoke("removeCollectionFields", this.id, e);
  }
  async setFieldOrder(e) {
    return this.#e.invoke("setCollectionFieldOrder", this.id, e);
  }
  async getItems() {
    return (await this.#e.invoke("getCollectionItems2", this.id)).map((i) => new Dt(i, this.#e));
  }
  async addItems(e) {
    await this.#e.invoke("addCollectionItems2", this.id, e);
  }
  async removeItems(e) {
    return this.#e.invoke("removeCollectionItems", e);
  }
  async setAsActive() {
    return this.#e.invoke("setActiveCollection", this.id);
  }
  async setPluginData(e, i) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, i);
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
};
var Dt = class t9 {
  id;
  slug;
  slugByLocale;
  draft;
  fieldData;
  #e;
  constructor(e, i) {
    let n = si(e.fieldData, i);
    this.id = e.id, this.slug = e.slug, this.slugByLocale = e.slugByLocale, this.draft = e.draft ?? false, this.fieldData = n, this.#e = i, u(this);
  }
  async remove() {
    return this.#e.invoke("removeCollectionItems", [this.id]);
  }
  async setAttributes(e) {
    let i = await this.#e.invoke("setCollectionItemAttributes2", this.id, e);
    return i ? new t9(i, this.#e) : null;
  }
  async setPluginData(e, i) {
    return this.#e.invoke("setPluginDataForNode", this.id, e, i);
  }
  async getPluginData(e) {
    return this.#e.invoke("getPluginDataForNode", this.id, e);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeysForNode", this.id);
  }
};
var we = class t10 {
  #e;
  #t;
  constructor(e, i) {
    this.#e = e, this.#t = i;
  }
  get id() {
    return this.#e.id;
  }
  get width() {
    return this.#e.width;
  }
  get height() {
    return this.#e.height;
  }
  get title() {
    return this.#e.title;
  }
  get codePreview() {
    return this.#e.codePreview;
  }
  async setAttributes(e) {
    let i = await this.#t.invoke("updateComponentInstancePlaceholder", this.id, e);
    return i ? new t10(i, this.#t) : null;
  }
  async remove() {
    await this.#t.invoke("removeComponentInstancePlaceholder", this.id);
  }
  async replaceWithComponentInstance(e, i) {
    let n = await this.#t.invoke("replaceComponentInstancePlaceholderWithComponentInstance", this.id, e, i);
    if (!n) return null;
    let o = p(n, this.#t);
    return c(j(o)), o;
  }
};
var fn = /* @__PURE__ */ (() => {
  let t12 = null;
  return { disableUntilMouseUp: () => {
    if (t12) return;
    t12 = document.createElement("style"), t12.textContent = "* { pointer-events: none !important; user-select: none !important; -webkit-user-select: none !important; }", document.head.appendChild(t12);
    let e = () => {
      t12 && (document.head.removeChild(t12), t12 = null, o());
    }, i = (r) => {
      r.buttons > 0 && r.buttons & 1 || e();
    }, n = () => {
      e();
    };
    window.addEventListener("pointerup", i, true), window.addEventListener("pointermove", i, true), window.addEventListener("blur", n);
    function o() {
      window.removeEventListener("pointerup", i, true), window.removeEventListener("pointermove", i, true), window.removeEventListener("blur", n);
    }
  } };
})();
var li = 5;
var Cn = /* @__PURE__ */ (() => {
  let t12 = 1;
  return { next: () => `drag-${t12++}` };
})();
function Fn() {
}
function di(t12, e, i, n) {
  if (t12.mode !== "canvas") return Fn;
  let o = Cn.next(), r = document.body.style.cursor, a = { type: "idle" }, l = document.body, V = f.subscribeToIsAllowedTo("makeDraggable", (g) => {
    g || Rt();
  }), D = (g) => {
    f.isAllowedTo("makeDraggable") && a.type !== "idle" && (a.type === "dragging" && t12.invoke("onDragEnd", { ...g, dragSessionId: o }).then((C) => {
      try {
        n?.(C);
      } catch {
      }
    }).catch((C) => {
      if (C instanceof Error) {
        n?.({ status: "error", reason: C.message });
        return;
      }
      if (typeof C == "string") {
        n?.({ status: "error", reason: C });
        return;
      }
      n?.({ status: "error" });
    }), Rt());
  }, S = (g) => {
    if (!f.isAllowedTo("makeDraggable") || a.type === "idle") return;
    if (!(g.buttons > 0 && !!(g.buttons & 1))) {
      D({ cancelled: false });
      return;
    }
    let { clientX: ge, clientY: Y } = g;
    if (a.type === "pointerDown") {
      let Z = ge - a.dragStart.mouse.x, Wt = Y - a.dragStart.mouse.y;
      if (Math.abs(Z) < li && Math.abs(Wt) < li) return;
      a = { type: "dragging", dragStart: a.dragStart }, t12.invoke("onDragStart", a.dragStart), document.getSelection()?.empty(), fn.disableUntilMouseUp();
    }
    l.setPointerCapture(g.pointerId);
    let ye = { x: ge, y: Y };
    t12.invoke("onDrag", { dragSessionId: o, mouse: ye }).then((Z) => {
      a.type === "dragging" && (document.body.style.cursor = Z ?? "");
    });
  }, vt = (g) => {
    g.key === "Escape" && D({ cancelled: true });
  }, kt = () => {
    D({ cancelled: true });
  }, Et = (g) => {
    if (!f.isAllowedTo("makeDraggable")) return;
    D({ cancelled: true });
    let C = e.getBoundingClientRect(), ge = { x: C.x, y: C.y, width: C.width, height: C.height }, Y, ye = e.querySelectorAll("svg");
    if (ye.length === 1) {
      let he = ye.item(0).getBoundingClientRect();
      Y = { x: he.x, y: he.y, width: he.width, height: he.height };
    }
    let Z = { x: g.clientX, y: g.clientY };
    a = { type: "pointerDown", dragStart: { dragSessionId: o, elementRect: ge, svgRect: Y, mouse: Z } }, t12.invoke("setDragData", o, i()), l.addEventListener("pointermove", S, true), l.addEventListener("pointerup", S, true), window.addEventListener("keydown", vt, true), window.addEventListener("blur", kt);
  }, Mt = () => {
    if (!f.isAllowedTo("makeDraggable")) return;
    let g = i();
    g.type === "detachedComponentLayers" && t12.invoke("preloadDetachedComponentLayers", g.url), g.type === "image" && t12.invoke("preloadImageUrlForInsertion", g.image), g.previewImage && t12.invoke("preloadDragPreviewImage", g.previewImage);
  };
  e.addEventListener("pointerdown", Et), e.addEventListener("mouseenter", Mt);
  function Rt() {
    a = { type: "idle" }, document.body.style.cursor = r, l.removeEventListener("pointermove", S, true), l.removeEventListener("pointerup", S, true), window.removeEventListener("keydown", vt, true), window.removeEventListener("blur", kt);
  }
  return () => {
    e.removeEventListener("pointerdown", Et), e.removeEventListener("mouseenter", Mt), D({ cancelled: true }), V();
  };
}
var X = class t11 {
  #e;
  #t;
  get id() {
    return this.#e.id;
  }
  get from() {
    return this.#e.from;
  }
  get to() {
    return this.#e.to;
  }
  get expandToAllLocales() {
    return this.#e.expandToAllLocales;
  }
  constructor(e, i) {
    this.#t = i, this.#e = e;
  }
  remove() {
    return this.#t.invoke("removeRedirects", [this.id]);
  }
  async setAttributes(e) {
    let i = { ...e, id: this.id }, [n] = await this.#t.invoke("addRedirects", [i]);
    return c(fe(n)), m(n) ? null : new t11(n, this.#t);
  }
};
var me = class {
  #e;
  constructor(e) {
    this.#e = e;
  }
  get mode() {
    return this.#e.mode;
  }
  isAllowedTo(...e) {
    if (true) for (let i of e) for (let n of ue[i]) this.#e.messageTypesCheckedInIsAllowedTo.add(n);
    return e.every((i) => this.#e.perMethodPermissionMap[i]);
  }
  subscribeToIsAllowedTo(...e) {
    let [i, n] = Ut(e), o = this.isAllowedTo(...i), r = () => {
      let a = this.isAllowedTo(...i);
      a !== o && (o = a, n(o));
    };
    return this.#e.permissionSubscriptions.add(r), () => {
      this.#e.permissionSubscriptions.delete(r);
    };
  }
  async showUI(e) {
    return this.#e.invoke("showUI", e);
  }
  async hideUI() {
    return this.#e.invoke("hideUI");
  }
  closePlugin(e, i) {
    throw this.#e.invoke("closePlugin", e, i), new E();
  }
  async getCurrentUser() {
    return this.#e.invoke("getCurrentUser2");
  }
  async getProjectInfo() {
    return this.#e.invoke("getProjectInfo2");
  }
  async getSelection() {
    return (await this.#e.invoke("getSelection")).map((i) => {
      let n = p(i, this.#e);
      return c(ce(n)), n;
    });
  }
  async setSelection(e) {
    let i = s(e) ? [e] : Array.from(e);
    return this.#e.invoke("setSelection", i);
  }
  subscribeToSelection(e) {
    return this.#e.subscribe("selection", (i) => {
      let n = i.map((o) => {
        let r = p(o, this.#e);
        return c(ce(r)), r;
      });
      e(n);
    });
  }
  async getCanvasRoot() {
    let e = await this.#e.invoke("getCanvasRoot"), i = p(e, this.#e);
    return c(He(i)), i;
  }
  subscribeToCanvasRoot(e) {
    return this.#e.subscribe("canvasRoot", (i) => {
      let n = p(i, this.#e);
      c(He(n)), e(n);
    });
  }
  async getPublishInfo() {
    return this.#e.invoke("getPublishInfo");
  }
  subscribeToPublishInfo(e) {
    return this.#e.subscribe("publishInfo", e);
  }
  async createFrameNode(e, i) {
    let n = await this.#e.invoke("createNode", "FrameNode", i ?? null, e);
    if (!n) return null;
    let o = p(n, this.#e);
    return c(o instanceof L), o;
  }
  async removeNodes(e) {
    return this.#e.invoke("removeNodes2", e);
  }
  async removeNode(e) {
    return this.removeNodes([e]);
  }
  async cloneNode(e) {
    return this.#e.cloneNode(e);
  }
  async getNode(e) {
    let i = await this.#e.invoke("getNode", e);
    return i ? p(i, this.#e) : null;
  }
  async getParent(e) {
    return this.#e.getParent(e);
  }
  async getChildren(e) {
    return this.#e.getChildren(e);
  }
  async getRect(e) {
    return this.#e.invoke("getRect", e);
  }
  async zoomIntoView(e, i) {
    let n = s(e) ? [e] : Array.from(e);
    return this.#e.invoke("zoomIntoView", n, i);
  }
  async setAttributes(e, i) {
    return this.#e.setAttributes(e, i);
  }
  async setParent(e, i, n) {
    return this.#e.invoke("setParent", e, i, n);
  }
  async getNodesWithType(e) {
    return (await this.#e.invoke("getNodesWithType", null, e)).map((n) => p(n, this.#e));
  }
  async getNodesWithAttribute(e) {
    return (await this.#e.invoke("getNodesWithAttribute", null, e)).map((n) => p(n, this.#e));
  }
  async getNodesWithAttributeSet(e) {
    return (await this.#e.invoke("getNodesWithAttributeSet", null, e)).map((n) => p(n, this.#e));
  }
  async getImage() {
    let e = await this.#e.invoke("getImage");
    return e ? new y(e, this.#e) : null;
  }
  subscribeToImage(e) {
    return this.#e.subscribe("image", (i) => {
      if (!i) {
        e(null);
        return;
      }
      e(new y(i, this.#e));
    });
  }
  async addImage(e) {
    let i = await Q(e), n = N(i);
    return this.#e.invokeTransferable("addImage", n, i);
  }
  async setImage(e) {
    let i = await Q(e), n = N(i);
    return this.#e.invokeTransferable("setImage", n, i);
  }
  async uploadImage(e) {
    let i = await Q(e), n = N(i), o = await this.#e.invokeTransferable("uploadImage", n, i);
    return new y(o, this.#e);
  }
  async addImages(e) {
    let i = await Ve(e), n = i.flatMap(N);
    await this.#e.invokeTransferable("addImages", n, i);
  }
  async uploadImages(e) {
    let i = await Ve(e), n = i.flatMap(N), o = await this.#e.invokeTransferable("uploadImages", n, i), r = [];
    for (let a of o) r.push(new y(a, this.#e));
    return r;
  }
  async uploadFile(e) {
    let i = await Be(e), n = await this.#e.invokeTransferable("uploadFile", N(i), i);
    return new P(n);
  }
  async uploadFiles(e) {
    let i = await Promise.all(e.map(Be)), n = i.flatMap(N), o = await this.#e.invokeTransferable("uploadFiles", n, i), r = [];
    for (let a of o) r.push(new P(a));
    return r;
  }
  async addSVG(e) {
    return this.#e.invoke("addSVG", e);
  }
  async addComponentInstance({ url: e, attributes: i }) {
    let n = await this.#e.invoke("addComponentInstance", { url: e, attributes: i }), o = p(n, this.#e);
    return c(j(o)), o;
  }
  async addDetachedComponentLayers({ url: e, layout: i, attributes: n }) {
    let o = await this.#e.invoke("addDetachedComponentLayers", { url: e, layout: i, attributes: n }), r = p(o, this.#e);
    return c(Ne(r)), r;
  }
  async preloadDetachedComponentLayers(e) {
    await this.#e.invoke("preloadDetachedComponentLayers", e);
  }
  async preloadImageUrlForInsertion(e) {
    await this.#e.invoke("preloadImageUrlForInsertion", e);
  }
  async preloadDragPreviewImage(e) {
    await this.#e.invoke("preloadDragPreviewImage", e);
  }
  async getText() {
    return this.#e.invoke("getText");
  }
  async setText(e) {
    return this.#e.invoke("setText", e);
  }
  async addText(e, i) {
    return this.#e.invoke("addText", e, i);
  }
  async setCustomCode(e) {
    return this.#e.invoke("setCustomCode", e);
  }
  async getCustomCode() {
    return this.#e.invoke("getCustomCode");
  }
  subscribeToCustomCode(e) {
    return this.#e.subscribe("customCode", e);
  }
  subscribeToText(e) {
    return this.#e.subscribe("text", e);
  }
  makeDraggable(e, i, n) {
    return di(this.#e, e, i, n);
  }
  async getActiveManagedCollection() {
    let e = await this.#e.invoke("getActiveManagedCollection");
    return c(e, "Collection data must be defined"), new pe(e, this.#e);
  }
  async getManagedCollection() {
    return this.getActiveManagedCollection();
  }
  async getManagedCollections() {
    let e = await this.#e.invoke("getManagedCollections");
    return c(e, "Collections data must be defined"), e.map((i) => new pe(i, this.#e));
  }
  async getCollection(e) {
    let i = await this.#e.invoke("getCollection", e);
    return i ? new $(i, this.#e) : null;
  }
  async getActiveCollection() {
    let e = await this.#e.invoke("getActiveCollection");
    return e ? new $(e, this.#e) : null;
  }
  async getCollections() {
    return (await this.#e.invoke("getCollections")).map((i) => new $(i, this.#e));
  }
  notify = (e, i) => this.#e.notify(e, i);
  async getPluginData(e) {
    return this.#e.invoke("getPluginData", e);
  }
  async setPluginData(e, i) {
    return this.#e.invoke("setPluginData", e, i);
  }
  async getPluginDataKeys() {
    return this.#e.invoke("getPluginDataKeys");
  }
  async getColorStyles() {
    return (await this.#e.invoke("getColorStyles")).map((i) => new h(i, this.#e));
  }
  async getColorStyle(e) {
    let i = await this.#e.invoke("getColorStyle", e);
    return i ? new h(i, this.#e) : null;
  }
  async createColorStyle(e) {
    let i = await this.#e.invoke("createColorStyle", e);
    return new h(i, this.#e);
  }
  subscribeToColorStyles(e) {
    return this.#e.subscribe("colorStyles", (i) => {
      let n = i.map((o) => new h(o, this.#e));
      return e(n);
    });
  }
  async getTextStyles() {
    return (await this.#e.invoke("getTextStyles")).map((i) => new F(i, this.#e));
  }
  async getTextStyle(e) {
    let i = await this.#e.invoke("getTextStyle", e);
    return i ? new F(i, this.#e) : null;
  }
  async createTextStyle(e) {
    let i = await this.#e.invoke("createTextStyle", e);
    return new F(i, this.#e);
  }
  subscribeToTextStyles(e) {
    return this.#e.subscribe("textStyles", (i) => {
      let n = i.map((o) => new F(o, this.#e));
      return e(n);
    });
  }
  async getFont(e, i) {
    let n = await this.#e.invoke("getFont", e, i);
    return n ? R(n) : null;
  }
  async getFonts() {
    return (await this.#e.invoke("getFonts")).map(R);
  }
  getLocales() {
    return this.#e.invoke("getLocales");
  }
  getDefaultLocale() {
    return this.#e.invoke("getDefaultLocale");
  }
  getActiveLocale() {
    return this.#e.invoke("getActiveLocale");
  }
  async getLocalizationGroups() {
    return this.#e.invoke("getLocalizationGroups");
  }
  setLocalizationData(e) {
    return this.#e.invoke("setLocalizationData", e);
  }
  async getRedirects() {
    return (await this.#e.invoke("getRedirects")).map((i) => new X(i, this.#e));
  }
  subscribeToRedirects(e) {
    return this.#e.subscribe("redirects", (i) => {
      let n = i.map((o) => new X(o, this.#e));
      return e(n);
    });
  }
  async addRedirects(e) {
    return (await this.#e.invoke("addRedirects", e)).map((n) => new X(n, this.#e));
  }
  async removeRedirects(e) {
    return this.#e.invoke("removeRedirects", e);
  }
  async setRedirectOrder(e) {
    return this.#e.invoke("setRedirectOrder", e);
  }
  async createCodeFile(e, i) {
    let n = await this.#e.invoke("createCodeFile", e, i);
    return new M(n, this.#e);
  }
  async getCodeFiles() {
    let e = await this.#e.invoke("getCodeFiles"), i = [];
    for (let n of e) i.push(new M(n, this.#e));
    return i;
  }
  async getCodeFile(e) {
    let i = await this.#e.invoke("getCodeFile", e);
    return i ? new M(i, this.#e) : null;
  }
  lintCode(e, i, n) {
    return this.#e.invoke("lintCode", e, i, n);
  }
  typecheckCode(e, i, n) {
    return this.#e.invoke("typecheckCode", e, i, n);
  }
  subscribeToCodeFiles(e) {
    return this.#e.subscribe("codeFiles", (i) => {
      let n = i?.map((o) => new M(o, this.#e));
      return e(n);
    });
  }
  setMenu(e) {
    return this.#e.setMenu(e);
  }
  showContextMenu(e, i) {
    return this.#e.showContextMenu(e, i);
  }
  async unstable_ensureMinimumDependencyVersion(e, i) {
    return this.#e.invoke("unstable_ensureMinimumDependencyVersion", e, i);
  }
};
var St = class extends me {
  #e;
  constructor(e) {
    super(e), this.#e = e, this.#e;
  }
};
var ci = class extends St {
  #e;
  constructor(e) {
    super(e), this.#e = e, this.#e;
  }
  async addComponentInstancePlaceholder(e) {
    let i = await this.#e.invoke("addComponentInstancePlaceholder", e);
    return new we(i, this.#e);
  }
  async [B.getAiServiceInfo]() {
    return this.#e.invoke(Ae);
  }
  async [B.sendTrackingEvent](e, i, n) {
    return this.#e.invoke(ve, e, i, n);
  }
  get [B.environmentInfo]() {
    return this.#e.environmentInfo;
  }
  get [B.showUncheckedPermissionToasts]() {
    return this.#e.showUncheckedPermissionToasts;
  }
  set [B.showUncheckedPermissionToasts](e) {
    this.#e.showUncheckedPermissionToasts = e;
  }
  async createTextNode(e, i) {
    let n = await this.#e.invoke("createNode", "TextNode", i ?? null, e);
    if (!n) return null;
    let o = p(n, this.#e);
    return c(o instanceof U), o;
  }
  subscribeToOpenCodeFile(e) {
    return this.#e.subscribe("openCodeFile", (i) => {
      let n = i ? new M(i, this.#e) : null;
      return e(n);
    });
  }
};
async function In() {
  if (!(typeof window > "u")) return new Promise((t12) => {
    function e({ data: i, origin: n }) {
      $t(i) && (window.removeEventListener("message", e), t12({ origin: n, pluginReadyResponse: i }));
    }
    window.addEventListener("message", e), window.parent.postMessage(jt, "*");
  });
}
var bn = await In();
var f = new me(new Ee(bn));
function Nt(...t12) {
  let [e, i] = (0, import_react3.useState)(() => f.isAllowedTo(...t12)), [n, o] = (0, import_react3.useState)(t12);
  return Lt(t12, n) || (i(f.isAllowedTo(...t12)), o(t12)), (0, import_react3.useEffect)(() => {
    let r = f.subscribeToIsAllowedTo(...n, (a) => {
      i(a);
    });
    return () => {
      r();
    };
  }, [n]), e;
}
function At(t12, e, i) {
  let n = Nt("makeDraggable"), o = Sn(() => J(e) ? e() : e);
  (0, import_react2.useEffect)(() => {
    if (!n) return;
    let r = t12.current;
    if (r instanceof HTMLElement) return f.makeDraggable(r, o, i);
  }, [n, o, i]);
}
function Sn(t12) {
  let e = (0, import_react2.useRef)(t12);
  return e.current = t12, (0, import_react2.useCallback)((...i) => e.current(...i), []);
}
var En = (0, import_react.forwardRef)(function({ data: e, children: i, onDragComplete: n, ...o }, r) {
  let a = (0, import_react.useRef)(null);
  if (At(a, e, n), (0, import_react.isValidElement)(i)) {
    let l = Object.assign({}, o);
    return d(i.props) && Object.assign(l, i.props), l.ref = Wn(a, r, i.ref), (0, import_react.cloneElement)(i, l);
  }
  return import_react.Children.count(i) > 1 && import_react.Children.only(i), null;
});
var Mn = "current";
function Rn(t12) {
  return d(t12) && Mn in t12;
}
function Wn(...t12) {
  return (e) => {
    for (let i of t12) J(i) ? i(e) : Rn(i) && (i.current = e);
  };
}
var wn = { fixed: true, sticky: true, absolute: true, relative: true };
var mi = "position";
function Ar(t12) {
  if (!(mi in t12)) return false;
  let e = t12[mi];
  return s(e) && wn[e] === true;
}
var gi = "top";
function vr(t12) {
  if (!(gi in t12)) return false;
  let e = t12[gi];
  return s(e) || m(e);
}
var yi = "width";
function kr(t12) {
  if (!(yi in t12)) return false;
  let e = t12[yi];
  return s(e) || m(e);
}
var hi = "maxWidth";
function Er(t12) {
  if (!(hi in t12)) return false;
  let e = t12[hi];
  return s(e) || m(e);
}
var fi = "aspectRatio";
function Mr(t12) {
  if (!(fi in t12)) return false;
  let e = t12[fi];
  return z(e) || m(e);
}
var Ci = "name";
function Rr(t12) {
  if (!(Ci in t12)) return false;
  let e = t12[Ci];
  return s(e) || m(e);
}
var Fi = "visible";
function Wr(t12) {
  if (!(Fi in t12)) return false;
  let e = t12[Fi];
  return Le(e);
}
var Ii = "locked";
function wr(t12) {
  if (!(Ii in t12)) return false;
  let e = t12[Ii];
  return Le(e);
}
var bi = "backgroundColor";
function Lr(t12) {
  if (!(bi in t12)) return false;
  let e = t12[bi];
  return s(e) || k(e) || m(e);
}
var Pi = "backgroundColor";
function Ur(t12) {
  if (!(Pi in t12)) return false;
  let e = t12[Pi];
  return s(e) || v(e) || m(e);
}
var xi = "backgroundImage";
function Br(t12) {
  if (!(xi in t12)) return false;
  let e = t12[xi];
  return e instanceof y || m(e);
}
var Ti = "backgroundImage";
function Vr(t12) {
  if (!(Ti in t12)) return false;
  let e = t12[Ti];
  return e instanceof y ? false : O(e) || m(e);
}
var Di = "backgroundGradient";
function zr(t12) {
  if (!(Di in t12)) return false;
  let e = t12[Di];
  return te(e) || m(e);
}
var Si = "backgroundGradient";
function Or(t12) {
  if (!(Si in t12)) return false;
  let e = t12[Si];
  return d(e) || m(e);
}
var Ni = "rotation";
function Gr(t12) {
  if (!(Ni in t12)) return false;
  let e = t12[Ni];
  return z(e);
}
var Ai = "opacity";
function _r(t12) {
  if (!(Ai in t12)) return false;
  let e = t12[Ai];
  return z(e);
}
var vi = "borderRadius";
function Kr(t12) {
  if (!(vi in t12)) return false;
  let e = t12[vi];
  return s(e) || m(e);
}
var ki = "svg";
function Hr(t12) {
  if (!(ki in t12)) return false;
  let e = t12[ki];
  return s(e);
}
var Ei = "componentIdentifier";
function jr(t12) {
  if (!(Ei in t12)) return false;
  let e = t12[Ei];
  return s(e);
}
var Mi = "font";
function qr(t12) {
  if (!(Mi in t12)) return false;
  let e = t12[Mi];
  return ee(e);
}
var Ri = "font";
function $r(t12) {
  if (!(Ri in t12)) return false;
  let e = t12[Ri];
  return zt(e) || m(e);
}
var Wi = "inlineTextStyle";
function Xr(t12) {
  if (!(Wi in t12)) return false;
  let e = t12[Wi];
  return H(e) || m(e);
}
var wi = "inlineTextStyle";
function Yr(t12) {
  if (!(wi in t12)) return false;
  let e = t12[wi];
  return _t(e) || m(e);
}
var Li = "link";
function Zr(t12) {
  if (!(Li in t12)) return false;
  let e = t12[Li];
  return s(e) || m(e);
}
var Ui = "imageRendering";
function Jr(t12) {
  if (!(Ui in t12)) return false;
  let e = t12[Ui];
  return s(e) || m(e);
}
export {
  B as $framerInternal,
  re as ComponentInstanceNode,
  se as ComponentNode,
  K as ConicGradient,
  En as Draggable,
  L as FrameNode,
  E as FramerPluginClosedError,
  ie as FramerPluginError,
  G as LinearGradient,
  _ as RadialGradient,
  ne as SVGNode,
  U as TextNode,
  oe as VectorSetItemNode,
  le as VectorSetNode,
  ae as WebPageNode,
  f as framer,
  cn as isCodeFileComponentExport,
  un as isCodeFileOverrideExport,
  k as isColorStyle,
  j as isComponentInstanceNode,
  Jt as isComponentNode,
  Fe as isFileAsset,
  Ne as isFrameNode,
  Ie as isImageAsset,
  Yt as isSVGNode,
  Xt as isTextNode,
  H as isTextStyle,
  ei as isVectorSetItemNode,
  Qt as isVectorSetNode,
  Zt as isWebPageNode,
  Mr as supportsAspectRatio,
  Lr as supportsBackgroundColor,
  Ur as supportsBackgroundColorData,
  zr as supportsBackgroundGradient,
  Or as supportsBackgroundGradientData,
  Br as supportsBackgroundImage,
  Vr as supportsBackgroundImageData,
  Kr as supportsBorderRadius,
  jr as supportsComponentInfo,
  qr as supportsFont,
  $r as supportsFontData,
  Jr as supportsImageRendering,
  Xr as supportsInlineTextStyle,
  Yr as supportsInlineTextStyleData,
  Zr as supportsLink,
  wr as supportsLocked,
  Rr as supportsName,
  _r as supportsOpacity,
  vr as supportsPins,
  Ar as supportsPosition,
  Gr as supportsRotation,
  Hr as supportsSVG,
  kr as supportsSize,
  Er as supportsSizeConstraints,
  Wr as supportsVisible,
  Nt as useIsAllowedTo,
  At as useMakeDraggable
};
//# sourceMappingURL=framer-plugin.js.map
